{"version":3,"sources":["../index.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\";\n\nconst secretKey: jwt.Secret | undefined = process.env.SAAZPAY_CLIENT_KEY;\nconst baseUrl: string | undefined = process.env.SAAZPAY_BASE_URL;\n\ntype TokenProps = {\n  appId: string;\n  userId?: string;\n  expiresIn?: number;\n};\n\nexport const getAccessToken = ({\n  appId,\n  userId,\n  expiresIn = 60,\n}: TokenProps): string => {\n  if (!secretKey) {\n    throw new Error(\"Saazpay secret key is not defined\");\n  }\n\n  const formattedPrivateKey = `-----BEGIN PRIVATE KEY-----\\n${secretKey}\\n-----END PRIVATE KEY-----`;\n  return jwt.sign(\n    {\n      userId,\n      appId,\n    },\n    formattedPrivateKey,\n    { expiresIn: expiresIn, algorithm: \"ES256\" }\n  );\n};\n\nexport interface IPlan {\n  id: string;\n  price: number;\n  currency: string;\n  tax_mode: string;\n  name: string;\n  description: string;\n  billing_frequency: number;\n  billing_interval: string;\n  trial_frequency: null;\n  trial_interval: null;\n  quantity_minimum: number;\n  quantity_maximum: number;\n  product_id: string;\n  createdAt: string;\n  updatedAt: string;\n  product: IProduct;\n}\n\nexport interface IProduct {\n  id: string;\n  name: string;\n  description: string;\n  image_url: string;\n  application_id: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const getPlans = async ({\n  appId,\n}: {\n  appId: string;\n}): Promise<IPlan[]> => {\n  if (!baseUrl) {\n    throw new Error(\"Saazpay base URL is not defined\");\n  }\n  const res = await fetch(`${baseUrl}/api/v1/plans?id=${appId}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${process.env.SAAZPAY_API_KEY}`,\n    },\n  })\n    .then((res) => res.json())\n    .catch((err) => {\n      console.error(err);\n      return [];\n    });\n\n  return res as IPlan[];\n};\n\nexport interface ISubscription {\n  id: string;\n  customer_id: string;\n  unique_identifier: string;\n  status: string;\n  paused_at: null;\n  canceled_at: null;\n  scheduled_change: null;\n  next_billed_at: string;\n  starts_at: string;\n  ends_at: string;\n  created_at: string;\n  applicationId: string;\n  product: ISubscriptionProduct;\n  price: ISubscriptionPrice;\n}\n\ninterface ISubscriptionPrice {\n  id: string;\n  name: string;\n  description: string;\n  product_id: string;\n  billing_frequency: number;\n  billing_interval: string;\n  trial_frequency: number;\n  trial_interval: string;\n  currency: string;\n  price: number;\n}\n\ninterface ISubscriptionProduct {\n  id: string;\n  name: string;\n  description: string;\n  image_url: string;\n}\nexport const getActiveSubscription = async ({\n  appId,\n  userId,\n}: {\n  appId: string;\n  userId: string;\n}): Promise<ISubscription> => {\n  if (!baseUrl) {\n    throw new Error(\"Saazpay base URL is not defined\");\n  }\n  const res = await fetch(\n    `${baseUrl}/api/v1/subscriptions?appId=${appId}&userId=${userId}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.SAAZPAY_API_KEY}`,\n      },\n    }\n  )\n    .then((res) => res.json())\n    .catch((err) => {\n      console.error(err);\n      return [];\n    });\n\n  return res;\n};\n"],"mappings":"AAAA,OAAOA,MAAS,eAEhB,IAAMC,EAAoC,QAAQ,IAAI,mBAChDC,EAA8B,QAAQ,IAAI,iBAQnCC,EAAiB,CAAC,CAC7B,MAAAC,EACA,OAAAC,EACA,UAAAC,EAAY,EACd,IAA0B,CACxB,GAAI,CAACL,EACH,MAAM,IAAI,MAAM,mCAAmC,EAGrD,IAAMM,EAAsB;AAAA,EAAgCN;AAAA,2BAC5D,OAAOD,EAAI,KACT,CACE,OAAAK,EACA,MAAAD,CACF,EACAG,EACA,CAAE,UAAWD,EAAW,UAAW,OAAQ,CAC7C,CACF,EA+BaE,EAAW,MAAO,CAC7B,MAAAJ,CACF,IAEwB,CACtB,GAAI,CAACF,EACH,MAAM,IAAI,MAAM,iCAAiC,EAenD,OAbY,MAAM,MAAM,GAAGA,qBAA2BE,IAAS,CAC7D,OAAQ,MACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAU,QAAQ,IAAI,iBACvC,CACF,CAAC,EACE,KAAMK,GAAQA,EAAI,KAAK,CAAC,EACxB,MAAOC,IACN,QAAQ,MAAMA,CAAG,EACV,CAAC,EACT,CAGL,EAsCaC,EAAwB,MAAO,CAC1C,MAAAP,EACA,OAAAC,CACF,IAG8B,CAC5B,GAAI,CAACH,EACH,MAAM,IAAI,MAAM,iCAAiC,EAkBnD,OAhBY,MAAM,MAChB,GAAGA,gCAAsCE,YAAgBC,IACzD,CACE,OAAQ,MACR,QAAS,CACP,eAAgB,mBAChB,cAAe,UAAU,QAAQ,IAAI,iBACvC,CACF,CACF,EACG,KAAMI,GAAQA,EAAI,KAAK,CAAC,EACxB,MAAOC,IACN,QAAQ,MAAMA,CAAG,EACV,CAAC,EACT,CAGL","names":["jwt","secretKey","baseUrl","getAccessToken","appId","userId","expiresIn","formattedPrivateKey","getPlans","res","err","getActiveSubscription"]}